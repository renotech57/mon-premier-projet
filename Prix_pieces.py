import sys
import os
sys.path.append(r"C:\cadwork\libs")

import cadwork
import geometry_controller as gc
import attribute_controller as ac
import element_controller as ec
import material_controller as mc
import utility_controller as uc
from datetime import datetime
from collections import defaultdict
import openpyxl
from openpyxl.utils import get_column_letter
from openpyxl.worksheet.table import Table, TableStyleInfo
import subprocess
import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import threading

class ConfigurateurPrixInterface:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Configurateur Prix par Pi√®ce - Cadwork")
        self.root.geometry("1200x800")
        self.root.configure(bg='#f0f0f0')
        
        # Constantes
        self.prix_traitement = {"CL2": 25.5, "CL3": 215, "CL2 INCOLORE": 50}
        self.prix_faconnage = {
            "T1_V": 224.4, "T16_L": 2.34, "T2_V": 243.1, "T3_V": 320, "T4_V": 263.5
        }
        self.prix_prestation = {
            "MO1_S": 17, "MO2_S": 28.9, "MO3_S": 22.95, "MO4_S": 19.55,
            "MO5_V": 219.3, "MO6_V": 85, "MO7_V": 119, "MO8_V": 35
        }
        self.VALORISATION_CHUTE = 80
        
        # Variables
        self.element_ids = []
        self.materiaux_detectes = {}
        self.config_materiaux = {}
        self.should_stop = False
        self.config_validee = False
        self.liste_pieces = []
        
        self.setup_ui()
        
    def setup_ui(self):
        # Style
        style = ttk.Style()
        style.theme_use('clam')
        
        # Titre principal
        title_frame = tk.Frame(self.root, bg='#2c3e50', height=80)
        title_frame.pack(fill='x', padx=0, pady=0)
        title_frame.pack_propagate(False)
        
        title_label = tk.Label(title_frame, text="‚öôÔ∏è CONFIGURATEUR PRIX PAR PI√àCE", 
                              font=('Arial', 18, 'bold'), fg='white', bg='#2c3e50')
        title_label.pack(expand=True)
        
        # Frame principal
        main_frame = tk.Frame(self.root, bg='#f0f0f0')
        main_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Zone d'information
        info_frame = tk.LabelFrame(main_frame, text="‚ÑπÔ∏è Instructions", font=('Arial', 12, 'bold'), 
                                 bg='#f0f0f0', fg='#2c3e50')
        info_frame.pack(fill='x', pady=(0, 10))
        
        info_text = tk.Label(info_frame, 
                           text="1. Cliquez 'ANALYSER' pour d√©tecter tous les mat√©riaux\n"
                                "2. Configurez chaque mat√©riau selon vos besoins (optimisation, calculs, unit√©s)\n"
                                "3. Validez la configuration\n"
                                "4. Lancez le calcul des prix avec les param√®tres choisis",
                           font=('Arial', 10), bg='#f0f0f0', fg='#2c3e50', justify='left')
        info_text.pack(pady=10, padx=10)
        
        # Boutons d'action principaux
        action_frame = tk.Frame(main_frame, bg='#f0f0f0')
        action_frame.pack(fill='x', pady=(0, 10))
        
        self.analyze_button = tk.Button(action_frame, text="üîç ANALYSER LES MAT√âRIAUX", 
                                      command=self.analyze_materials, font=('Arial', 12, 'bold'),
                                      bg='#3498db', fg='white', height=2, cursor='hand2')
        self.analyze_button.pack(side='left', padx=(0, 10))
        
        self.validate_button = tk.Button(action_frame, text="‚úÖ VALIDER CONFIGURATION", 
                                       command=self.validate_config, font=('Arial', 12, 'bold'),
                                       bg='#27ae60', fg='white', height=2, cursor='hand2',
                                       state='disabled')
        self.validate_button.pack(side='left', padx=(0, 10))
        
        self.calculate_button = tk.Button(action_frame, text="üßÆ CALCULER PRIX", 
                                        command=self.calculate_prices, font=('Arial', 12, 'bold'),
                                        bg='#e67e22', fg='white', height=2, cursor='hand2',
                                        state='disabled')
        self.calculate_button.pack(side='left', padx=(0, 10))
        
        # Zone de configuration des mat√©riaux
        config_frame = tk.LabelFrame(main_frame, text="‚öôÔ∏è Configuration des mat√©riaux", 
                                   font=('Arial', 12, 'bold'), bg='#f0f0f0', fg='#2c3e50')
        config_frame.pack(fill='both', expand=True, pady=(0, 10))
        
        # Frame avec scrollbar pour la configuration
        canvas_frame = tk.Frame(config_frame)
        canvas_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        self.canvas = tk.Canvas(canvas_frame, bg='white')
        scrollbar = ttk.Scrollbar(canvas_frame, orient="vertical", command=self.canvas.yview)
        self.scrollable_frame = tk.Frame(self.canvas, bg='white')
        
        self.scrollable_frame.bind(
            "<Configure>",
            lambda e: self.canvas.configure(scrollregion=self.canvas.bbox("all"))
        )
        
        self.canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")
        self.canvas.configure(yscrollcommand=scrollbar.set)
        
        self.canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Zone de log
        log_frame = tk.LabelFrame(main_frame, text="üìã Journal", font=('Arial', 12, 'bold'), 
                                bg='#f0f0f0', fg='#2c3e50')
        log_frame.pack(fill='x', pady=(10, 0))
        
        self.text_area = scrolledtext.ScrolledText(log_frame, height=8, width=80, 
                                                 font=('Courier', 9), bg='#ffffff', 
                                                 fg='#2c3e50', wrap=tk.WORD)
        self.text_area.pack(fill='x', padx=10, pady=10)
        
        # Bouton fermer
        close_frame = tk.Frame(main_frame, bg='#f0f0f0')
        close_frame.pack(fill='x', pady=(10, 0))
        
        self.close_button = tk.Button(close_frame, text="üö™ FERMER", 
                                    command=self.close_application, font=('Arial', 12, 'bold'),
                                    bg='#95a5a6', fg='white', height=2, cursor='hand2')
        self.close_button.pack(side='right')
        
        # Gestionnaire de fermeture de fen√™tre
        self.root.protocol("WM_DELETE_WINDOW", self.close_application)
        
    def close_application(self):
        """Ferme l'application proprement"""
        self.root.destroy()
        
    def log(self, message):
        """Ajoute un message dans la zone de texte"""
        self.text_area.config(state='normal')
        self.text_area.insert(tk.END, f"{message}\n")
        self.text_area.config(state='disabled')
        self.text_area.see(tk.END)
        self.root.update()
        
    def analyze_materials(self):
        """Analyse les √©l√©ments et d√©tecte tous les mat√©riaux"""
        try:
            self.log("üîç R√©cup√©ration des √©l√©ments...")
            self.element_ids = ec.get_active_identifiable_element_ids()
            
            if not self.element_ids:
                messagebox.showwarning("Aucun √©l√©ment", "Veuillez s√©lectionner des √©l√©ments avant l'analyse.")
                return
                
            self.log(f"üìä Analyse de {len(self.element_ids)} √©l√©ment(s)")
            
            # D√©tection des mat√©riaux
            materiaux_stats = defaultdict(lambda: {'count': 0, 'exemple_id': None})
            
            for eid in self.element_ids:
                try:
                    mat_name = ac.get_element_material_name(eid).strip()
                    materiaux_stats[mat_name]['count'] += 1
                    if materiaux_stats[mat_name]['exemple_id'] is None:
                        materiaux_stats[mat_name]['exemple_id'] = eid
                except Exception:
                    continue
            
            self.materiaux_detectes = dict(materiaux_stats)
            self.log(f"‚úÖ {len(self.materiaux_detectes)} mat√©riau(x) d√©tect√©(s)")
            
            # Cr√©er l'interface de configuration
            self.create_config_interface()
            
            # Activer le bouton de validation
            self.validate_button.config(state='normal')
            
        except Exception as e:
            self.log(f"‚ùå Erreur lors de l'analyse : {e}")
            messagebox.showerror("Erreur", f"Erreur lors de l'analyse :\n{e}")
    
    def create_config_interface(self):
        """Cr√©e l'interface de configuration pour chaque mat√©riau"""
        # Nettoyer le frame existant
        for widget in self.scrollable_frame.winfo_children():
            widget.destroy()
        
        self.config_vars = {}
        
        # Headers
        header_frame = tk.Frame(self.scrollable_frame, bg='white')
        header_frame.pack(fill='x', padx=5, pady=5)
        
        tk.Label(header_frame, text="Mat√©riau", font=('Arial', 10, 'bold'), 
                bg='white', width=22, anchor='w').grid(row=0, column=0, padx=3)
        tk.Label(header_frame, text="Qt√©", font=('Arial', 10, 'bold'), 
                bg='white', width=4).grid(row=0, column=1, padx=3)
        tk.Label(header_frame, text="Optimiser", font=('Arial', 10, 'bold'), 
                bg='white', width=8).grid(row=0, column=2, padx=3)
        tk.Label(header_frame, text="Mati√®re", font=('Arial', 10, 'bold'), 
                bg='white', width=8).grid(row=0, column=3, padx=3)
        tk.Label(header_frame, text="Chutes", font=('Arial', 10, 'bold'), 
                bg='white', width=6).grid(row=0, column=4, padx=3)
        tk.Label(header_frame, text="Unit√©", font=('Arial', 10, 'bold'), 
                bg='white', width=6).grid(row=0, column=5, padx=3)
        tk.Label(header_frame, text="Fa√ßonnage", font=('Arial', 10, 'bold'), 
                bg='white', width=9).grid(row=0, column=6, padx=3)
        tk.Label(header_frame, text="Traitement", font=('Arial', 10, 'bold'), 
                bg='white', width=9).grid(row=0, column=7, padx=3)
        tk.Label(header_frame, text="Prestation", font=('Arial', 10, 'bold'), 
                bg='white', width=9).grid(row=0, column=8, padx=3)
        
        # Ligne de s√©paration
        separator = tk.Frame(self.scrollable_frame, height=2, bg='#bdc3c7')
        separator.pack(fill='x', padx=5, pady=2)
        
        # Configuration pour chaque mat√©riau
        for mat_name, stats in self.materiaux_detectes.items():
            self.config_vars[mat_name] = {}
            
            mat_frame = tk.Frame(self.scrollable_frame, bg='white', relief='ridge', bd=1)
            mat_frame.pack(fill='x', padx=5, pady=2)
            
            # Nom du mat√©riau
            tk.Label(mat_frame, text=mat_name, font=('Arial', 9), 
                    bg='white', width=22, anchor='w').grid(row=0, column=0, padx=3, pady=3)
            
            # Quantit√©
            tk.Label(mat_frame, text=str(stats['count']), font=('Arial', 9), 
                    bg='white', width=4).grid(row=0, column=1, padx=3, pady=3)
            
            # √Ä optimiser
            self.config_vars[mat_name]['optimiser'] = tk.BooleanVar()
            tk.Checkbutton(mat_frame, variable=self.config_vars[mat_name]['optimiser'],
                          bg='white').grid(row=0, column=2, padx=3, pady=3)
            
            # Compter en mati√®re
            self.config_vars[mat_name]['matiere'] = tk.BooleanVar()
            tk.Checkbutton(mat_frame, variable=self.config_vars[mat_name]['matiere'],
                          bg='white').grid(row=0, column=3, padx=3, pady=3)
            
            # Calculer les chutes
            self.config_vars[mat_name]['chutes'] = tk.BooleanVar()
            tk.Checkbutton(mat_frame, variable=self.config_vars[mat_name]['chutes'],
                          bg='white').grid(row=0, column=4, padx=3, pady=3)
            
            # Unit√©
            self.config_vars[mat_name]['unite'] = tk.StringVar(value="m¬≥")
            unite_combo = ttk.Combobox(mat_frame, textvariable=self.config_vars[mat_name]['unite'],
                                     values=["m¬≥", "m¬≤", "ml"], width=5, state="readonly")
            unite_combo.grid(row=0, column=5, padx=3, pady=3)
            
            # Fa√ßonnage autoris√©
            self.config_vars[mat_name]['faconnage'] = tk.BooleanVar(value=True)
            tk.Checkbutton(mat_frame, variable=self.config_vars[mat_name]['faconnage'],
                          bg='white').grid(row=0, column=6, padx=3, pady=3)
            
            # Traitement autoris√©
            self.config_vars[mat_name]['traitement'] = tk.BooleanVar(value=True)
            tk.Checkbutton(mat_frame, variable=self.config_vars[mat_name]['traitement'],
                          bg='white').grid(row=0, column=7, padx=3, pady=3)
            
            # Prestations autoris√©es
            self.config_vars[mat_name]['prestation'] = tk.BooleanVar(value=True)
            tk.Checkbutton(mat_frame, variable=self.config_vars[mat_name]['prestation'],
                          bg='white').grid(row=0, column=8, padx=3, pady=3)
            
            # Configuration par d√©faut bas√©e sur le nom du mat√©riau
            self.set_default_config(mat_name)
        
        # Boutons de configuration rapide
        quick_frame = tk.Frame(self.scrollable_frame, bg='white')
        quick_frame.pack(fill='x', padx=5, pady=10)
        
        tk.Label(quick_frame, text="Configuration rapide :", font=('Arial', 10, 'bold'), 
                bg='white').pack(side='left', padx=5)
        
        tk.Button(quick_frame, text="Bois structure", command=self.config_bois_structure,
                 bg='#27ae60', fg='white', font=('Arial', 9)).pack(side='left', padx=2)
        tk.Button(quick_frame, text="Panneaux", command=self.config_panneaux,
                 bg='#f39c12', fg='white', font=('Arial', 9)).pack(side='left', padx=2)
        tk.Button(quick_frame, text="Enveloppes", command=self.config_enveloppes,
                 bg='#e74c3c', fg='white', font=('Arial', 9)).pack(side='left', padx=2)
        tk.Button(quick_frame, text="Lin√©aires", command=self.config_lineaires,
                 bg='#9b59b6', fg='white', font=('Arial', 9)).pack(side='left', padx=2)
        tk.Button(quick_frame, text="Reset", command=self.config_reset,
                 bg='#95a5a6', fg='white', font=('Arial', 9)).pack(side='left', padx=2)
    
    def set_default_config(self, mat_name):
        """D√©finit une configuration par d√©faut bas√©e sur le nom du mat√©riau"""
        mat_lower = mat_name.lower()
        
        if any(x in mat_lower for x in ['enveloppe', 'paroi', 'isolation']):
            # Enveloppes : que prestations
            self.config_vars[mat_name]['optimiser'].set(False)
            self.config_vars[mat_name]['matiere'].set(False)
            self.config_vars[mat_name]['chutes'].set(False)
            self.config_vars[mat_name]['unite'].set("m¬≤")
            self.config_vars[mat_name]['faconnage'].set(False)
            self.config_vars[mat_name]['traitement'].set(False)
            self.config_vars[mat_name]['prestation'].set(True)
        elif any(x in mat_lower for x in ['osb', 'panneau', 'contreplaque', 'mdf']):
            # Panneaux : mati√®re au m¬≤ sans optimisation
            self.config_vars[mat_name]['optimiser'].set(False)
            self.config_vars[mat_name]['matiere'].set(True)
            self.config_vars[mat_name]['chutes'].set(False)
            self.config_vars[mat_name]['unite'].set("m¬≤")
            self.config_vars[mat_name]['faconnage'].set(True)
            self.config_vars[mat_name]['traitement'].set(True)
            self.config_vars[mat_name]['prestation'].set(True)
        elif any(x in mat_lower for x in ['_l', 'barre', 'profil√©']):
            # Mat√©riaux lin√©aires : optimisation + mati√®re au ml
            self.config_vars[mat_name]['optimiser'].set(True)
            self.config_vars[mat_name]['matiere'].set(True)
            self.config_vars[mat_name]['chutes'].set(False)  # Pas de valorisation pour lin√©aires
            self.config_vars[mat_name]['unite'].set("ml")
            self.config_vars[mat_name]['faconnage'].set(True)
            self.config_vars[mat_name]['traitement'].set(True)
            self.config_vars[mat_name]['prestation'].set(True)
        else:
            # Bois par d√©faut : optimisation + mati√®re + chutes au m¬≥
            self.config_vars[mat_name]['optimiser'].set(True)
            self.config_vars[mat_name]['matiere'].set(True)
            self.config_vars[mat_name]['chutes'].set(True)
            self.config_vars[mat_name]['unite'].set("m¬≥")
            self.config_vars[mat_name]['faconnage'].set(True)
            self.config_vars[mat_name]['traitement'].set(True)
            self.config_vars[mat_name]['prestation'].set(True)
    
    def config_bois_structure(self):
        """Configuration rapide pour bois de structure"""
        for mat_name in self.materiaux_detectes.keys():
            mat_lower = mat_name.lower()
            if any(x in mat_lower for x in ['epicea', 'sapin', 'douglas', 'pin', 'meleze', 'chene', 'kvh', 'gl24', 'bois']):
                self.config_vars[mat_name]['optimiser'].set(True)
                self.config_vars[mat_name]['matiere'].set(True)
                self.config_vars[mat_name]['chutes'].set(True)
                self.config_vars[mat_name]['unite'].set("m¬≥")
                self.config_vars[mat_name]['faconnage'].set(True)
                self.config_vars[mat_name]['traitement'].set(True)
                self.config_vars[mat_name]['prestation'].set(True)
    
    def config_panneaux(self):
        """Configuration rapide pour panneaux"""
        for mat_name in self.materiaux_detectes.keys():
            mat_lower = mat_name.lower()
            if any(x in mat_lower for x in ['osb', 'panneau', 'contreplaque', 'mdf', 'agglomere']):
                self.config_vars[mat_name]['optimiser'].set(False)
                self.config_vars[mat_name]['matiere'].set(True)
                self.config_vars[mat_name]['chutes'].set(False)
                self.config_vars[mat_name]['unite'].set("m¬≤")
                self.config_vars[mat_name]['faconnage'].set(True)
                self.config_vars[mat_name]['traitement'].set(True)
                self.config_vars[mat_name]['prestation'].set(True)
    
    def config_enveloppes(self):
        """Configuration rapide pour enveloppes"""
        for mat_name in self.materiaux_detectes.keys():
            mat_lower = mat_name.lower()
            if any(x in mat_lower for x in ['enveloppe', 'paroi', 'isolation', 'bardage']):
                self.config_vars[mat_name]['optimiser'].set(False)
                self.config_vars[mat_name]['matiere'].set(False)
                self.config_vars[mat_name]['chutes'].set(False)
                self.config_vars[mat_name]['unite'].set("m¬≤")
                self.config_vars[mat_name]['faconnage'].set(False)
                self.config_vars[mat_name]['traitement'].set(False)
                self.config_vars[mat_name]['prestation'].set(True)
    
    def config_lineaires(self):
        """Configuration rapide pour mat√©riaux lin√©aires"""
        for mat_name in self.materiaux_detectes.keys():
            mat_lower = mat_name.lower()
            if any(x in mat_lower for x in ['_l', 'barre', 'profil√©', 'tube', 'rail']):
                self.config_vars[mat_name]['optimiser'].set(True)
                self.config_vars[mat_name]['matiere'].set(True)
                self.config_vars[mat_name]['chutes'].set(False)
                self.config_vars[mat_name]['unite'].set("ml")
                self.config_vars[mat_name]['faconnage'].set(True)
                self.config_vars[mat_name]['traitement'].set(True)
                self.config_vars[mat_name]['prestation'].set(True)
    
    def config_reset(self):
        """Remet tout √† z√©ro"""
        for mat_name in self.materiaux_detectes.keys():
            self.config_vars[mat_name]['optimiser'].set(False)
            self.config_vars[mat_name]['matiere'].set(False)
            self.config_vars[mat_name]['chutes'].set(False)
            self.config_vars[mat_name]['unite'].set("m¬≥")
            self.config_vars[mat_name]['faconnage'].set(False)
            self.config_vars[mat_name]['traitement'].set(False)
            self.config_vars[mat_name]['prestation'].set(False)
    
    def validate_config(self):
        """Valide la configuration et pr√©pare les param√®tres"""
        try:
            self.config_materiaux = {}
            
            for mat_name in self.materiaux_detectes.keys():
                self.config_materiaux[mat_name] = {
                    'optimiser': self.config_vars[mat_name]['optimiser'].get(),
                    'matiere': self.config_vars[mat_name]['matiere'].get(),
                    'chutes': self.config_vars[mat_name]['chutes'].get(),
                    'unite': self.config_vars[mat_name]['unite'].get(),
                    'faconnage': self.config_vars[mat_name]['faconnage'].get(),
                    'traitement': self.config_vars[mat_name]['traitement'].get(),
                    'prestation': self.config_vars[mat_name]['prestation'].get()
                }
            
            self.config_validee = True
            self.calculate_button.config(state='normal')
            
            # R√©sum√© de la configuration
            self.log("‚úÖ Configuration valid√©e !")
            self.log("=" * 50)
            
            count_optimiser = sum(1 for c in self.config_materiaux.values() if c['optimiser'])
            count_matiere = sum(1 for c in self.config_materiaux.values() if c['matiere'])
            count_chutes = sum(1 for c in self.config_materiaux.values() if c['chutes'])
            count_faconnage = sum(1 for c in self.config_materiaux.values() if c['faconnage'])
            count_traitement = sum(1 for c in self.config_materiaux.values() if c['traitement'])
            count_prestation = sum(1 for c in self.config_materiaux.values() if c['prestation'])
            
            self.log(f"üîß {count_optimiser} mat√©riau(x) √† optimiser")
            self.log(f"üì¶ {count_matiere} mat√©riau(x) compt√©s en mati√®re")
            self.log(f"‚ôªÔ∏è {count_chutes} mat√©riau(x) avec valorisation chutes")
            self.log(f"‚öôÔ∏è {count_faconnage} mat√©riau(x) avec fa√ßonnage")
            self.log(f"üé® {count_traitement} mat√©riau(x) avec traitement")
            self.log(f"üõ†Ô∏è {count_prestation} mat√©riau(x) avec prestation")
            self.log("=" * 50)
            
        except Exception as e:
            self.log(f"‚ùå Erreur validation : {e}")
            messagebox.showerror("Erreur", f"Erreur lors de la validation :\n{e}")
    
    def calculate_prices(self):
        """Lance le calcul des prix avec la configuration valid√©e"""
        if not self.config_validee:
            messagebox.showwarning("Configuration requise", "Veuillez d'abord valider la configuration.")
            return
        
        try:
            self.log("üöÄ Calcul des prix en cours...")
            
            # V√©rification de l'optimisation pour les mat√©riaux configur√©s
            elements_non_optimises = self.verifier_optimisation()
            
            if elements_non_optimises:
                self.log(f"‚ùå {len(elements_non_optimises)} √©l√©ment(s) n√©cessitent une optimisation")
                for elem in elements_non_optimises:
                    self.log(f"   - {elem['materiau']} (ID: {elem['id']})")
                messagebox.showerror("Optimisation requise", 
                                   f"{len(elements_non_optimises)} √©l√©ment(s) doivent √™tre optimis√©s.\n"
                                   "Consultez le journal pour plus de d√©tails.")
                return
            
            # Calcul des prix
            self.log("üí∞ Calcul des prix par pi√®ce...")
            self.calculate_all_prices()
            
            self.log("üìä G√©n√©ration du fichier Excel...")
            self.export_to_excel()
            
            self.log("üéØ Calcul termin√© avec succ√®s !")
            messagebox.showinfo("Succ√®s", f"Calcul termin√© !\n{len(self.liste_pieces)} pi√®ces trait√©es")
            
        except Exception as e:
            self.log(f"‚ùå Erreur calcul : {e}")
            messagebox.showerror("Erreur", f"Erreur lors du calcul :\n{e}")
    
    def verifier_optimisation(self):
        """V√©rifie l'optimisation selon la configuration"""
        elements_non_optimises = []
        
        for eid in self.element_ids:
            try:
                mat_name = ac.get_element_material_name(eid).strip()
                config = self.config_materiaux.get(mat_name, {})
                
                # Si le mat√©riau doit √™tre optimis√©
                if config.get('optimiser', False):
                    num_barre = ac.get_user_attribute(eid, 12)
                    taux_chute = ac.get_user_attribute(eid, 13)
                    
                    num_barre_vide = not num_barre or str(num_barre).strip() == ""
                    taux_chute_vide = not taux_chute or str(taux_chute).strip() == ""
                    
                    if num_barre_vide or taux_chute_vide:
                        elements_non_optimises.append({
                            'id': eid,
                            'materiau': mat_name
                        })
                        
            except Exception:
                continue
                
        return elements_non_optimises
    
    def safe_float(self, val, default=0.0):
        try:
            return float(str(val).replace('%', '').replace(',', '.'))
        except (ValueError, TypeError):
            return default
    
    def calculate_all_prices(self):
        """Calcule les prix pour toutes les pi√®ces selon la configuration"""
        # Dictionnaires de recap
        recap_traitement = defaultdict(float)
        recap_qte_traitement = defaultdict(float)
        recap_faconnage = defaultdict(float)
        recap_qte_faconnage = defaultdict(float)
        recap_prestation = defaultdict(float)
        recap_qte_prestation = defaultdict(float)
        recap_materiaux_piece = defaultdict(float)
        recap_qte_materiaux_piece = defaultdict(float)
        recap_materiaux_achat = defaultdict(float)
        recap_qte_materiaux_achat = defaultdict(float)
        recap_prix_unitaire_materiaux = {}
        self.liste_pieces = []
        
        total_volume_chute = 0
        total_surface_chute = 0
        total_longueur_chute = 0
        
        for i, eid in enumerate(self.element_ids):
            try:
                # Configuration du mat√©riau
                mat_name = ac.get_element_material_name(eid).strip()
                config = self.config_materiaux.get(mat_name, {})
                
                # Donn√©es g√©om√©triques
                largeur = round(gc.get_list_width(eid))
                hauteur = round(gc.get_list_height(eid))
                longueur_mm = gc.get_length(eid)
                longueur_m = longueur_mm / 1000
                section_str = f"{largeur}x{hauteur}"
                
                # Prix unitaire mati√®re
                mat_id = mc.get_material_id(mat_name)
                prix_u = self.safe_float(mc.get_price(mat_id))
                recap_prix_unitaire_materiaux[mat_name] = prix_u
                
                # Taux de chute selon configuration
                if config.get('optimiser', False):
                    taux_chute = self.safe_float(ac.get_user_attribute(eid, 13)) / 100.0
                    num_barre = ac.get_user_attribute(eid, 12) or "N/A"
                else:
                    taux_chute = 0.0
                    num_barre = "N/A"
                
                # Calculs selon l'unit√© configur√©e
                unite = config.get('unite', 'm¬≥')
                
                if unite == 'ml':
                    qte_utile = longueur_m
                    qte_achetee = qte_utile / (1.0 - taux_chute) if taux_chute < 1.0 else qte_utile
                    qte_chute_piece = qte_achetee - qte_utile
                    total_longueur_chute += qte_chute_piece
                elif unite == 'm¬≤':
                    surface_m2 = (largeur * longueur_mm) / 1_000_000
                    qte_utile = surface_m2
                    qte_achetee = qte_utile / (1.0 - taux_chute) if taux_chute < 1.0 else qte_utile
                    qte_chute_piece = qte_achetee - qte_utile
                    total_surface_chute += qte_chute_piece
                else:  # m¬≥
                    volume_m3 = largeur * hauteur * longueur_mm / 1_000_000_000
                    qte_utile = volume_m3
                    qte_achetee = qte_utile / (1.0 - taux_chute) if taux_chute < 1.0 else qte_utile
                    qte_chute_piece = qte_achetee - qte_utile
                    total_volume_chute += qte_chute_piece
                
                # Prix mati√®re selon configuration
                if config.get('matiere', False):
                    prix_piece = round(qte_utile * prix_u, 2)
                    prix_achat = round(qte_achetee * prix_u, 2)
                    recap_materiaux_piece[mat_name] += prix_piece
                    recap_qte_materiaux_piece[mat_name] += qte_utile
                    recap_materiaux_achat[mat_name] += prix_achat
                    recap_qte_materiaux_achat[mat_name] += qte_achetee
                else:
                    prix_piece = 0.0
                    prix_achat = 0.0
                
                # Traitement selon configuration
                prix_trait_piece = 0.0
                if config.get('traitement', False):
                    traitement_code = ac.get_user_attribute(eid, 1)
                    if traitement_code and traitement_code.strip() in self.prix_traitement:
                        tarif = self.prix_traitement[traitement_code.strip()]
                        # Volume pour traitement (toujours en m¬≥)
                        vol_traitement = largeur * hauteur * longueur_mm / 1_000_000_000
                        prix_trait_piece = round(vol_traitement * tarif, 2)
                        recap_qte_traitement[traitement_code.strip()] += vol_traitement
                
                # Fa√ßonnage selon configuration
                prix_fac = 0.0
                if config.get('faconnage', False):
                    sku = ac.get_sku(eid)
                    if sku and sku.strip() in self.prix_faconnage:
                        prix_f = self.prix_faconnage[sku.strip()]
                        if sku.strip().endswith("_L"):
                            qty_fac = longueur_m
                        else:
                            qty_fac = largeur * hauteur * longueur_mm / 1_000_000_000
                        prix_fac = round(qty_fac * prix_f, 2)
                        recap_faconnage[sku.strip()] += prix_fac
                        recap_qte_faconnage[sku.strip()] += qty_fac
                
                # Prestation selon configuration
                prix_presta = 0.0
                if config.get('prestation', False):
                    presta_code = ac.get_user_attribute(eid, 2)
                    if presta_code and presta_code.strip() in self.prix_prestation:
                        prix_p = self.prix_prestation[presta_code.strip()]
                        if presta_code.strip().endswith("_S"):
                            surface_presta = gc.get_element_reference_face_area(eid) / 1_000_000
                            qty_p = surface_presta
                        else:
                            qty_p = largeur * hauteur * longueur_mm / 1_000_000_000
                        prix_presta = round(qty_p * prix_p, 2)
                        recap_prestation[presta_code.strip()] += prix_presta
                        recap_qte_prestation[presta_code.strip()] += qty_p
                
                # Total pi√®ce
                total_piece = round(prix_achat + prix_fac + prix_presta + prix_trait_piece, 2)
                
                # Mise √† jour des attributs si prix > 0
                if total_piece > 0:
                    ac.set_user_attribute([eid], 8, str(prix_piece))
                    ac.set_user_attribute([eid], 9, str(prix_fac))
                    ac.set_user_attribute([eid], 10, str(prix_presta))
                    ac.set_user_attribute([eid], 11, str(total_piece))
                    ac.set_user_attribute([eid], 15, str(prix_achat))
                    ac.set_user_attribute([eid], 7, str(prix_trait_piece))
                
                # Liste pour Excel
                self.liste_pieces.append([
                    eid, mat_name, section_str, round(longueur_m, 3),
                    round(qte_utile, 5), round(qte_achetee, 5), round(prix_u, 2),
                    prix_piece, prix_achat, prix_trait_piece, prix_fac, prix_presta, total_piece,
                    num_barre, round(taux_chute * 100, 2), unite
                ])
                
            except Exception as e:
                self.log(f"‚ùå Erreur √©l√©ment {eid}: {e}")
        
        # Valorisation des chutes selon configuration
        valorisation_chute = 0.0
        for mat_name, config in self.config_materiaux.items():
            if config.get('chutes', False):
                unite = config.get('unite', 'm¬≥')
                if unite == 'm¬≤':
                    valorisation_chute += total_surface_chute * self.VALORISATION_CHUTE
                elif unite == 'm¬≥':
                    valorisation_chute += total_volume_chute * self.VALORISATION_CHUTE
                # Pas de valorisation pour ml
        
        # R√©cap traitement : calcul du total √† la fin
        for code in recap_qte_traitement:
            recap_traitement[code] = round(recap_qte_traitement[code] * self.prix_traitement[code], 2)
        
        self.log(f"‚úÖ {len(self.liste_pieces)} pi√®ces calcul√©es")
        self.log(f"üí∞ Valorisation des chutes : {round(valorisation_chute, 2)}‚Ç¨")
        
        # Stocker les recaps pour l'export
        self.recap_data = {
            'recap_materiaux_piece': recap_materiaux_piece,
            'recap_qte_materiaux_piece': recap_qte_materiaux_piece,
            'recap_materiaux_achat': recap_materiaux_achat,
            'recap_qte_materiaux_achat': recap_qte_materiaux_achat,
            'recap_traitement': recap_traitement,
            'recap_qte_traitement': recap_qte_traitement,
            'recap_faconnage': recap_faconnage,
            'recap_qte_faconnage': recap_qte_faconnage,
            'recap_prestation': recap_prestation,
            'recap_qte_prestation': recap_qte_prestation,
            'recap_prix_unitaire_materiaux': recap_prix_unitaire_materiaux,
            'valorisation_chute': round(valorisation_chute, 2),
            'total_volume_chute': total_volume_chute,
            'total_surface_chute': total_surface_chute,
            'total_longueur_chute': total_longueur_chute
        }
    
    def export_to_excel(self):
        """Exporte les r√©sultats vers Excel"""
        try:
            wb = openpyxl.Workbook()
            ws_pieces = wb.active
            ws_pieces.title = "Pi√®ces d√©taill√©es"
            ws_recap = wb.create_sheet("R√©capitulatif")

            headers = [
                "ID Pi√®ce", "Mat√©riau", "Section (mm)", "Longueur (m)", "Quantit√© utile",
                "Quantit√© achet√©e", "Prix unitaire (‚Ç¨)", "Prix mati√®re (‚Ç¨)", "Prix achat (‚Ç¨)", "Prix traitement (‚Ç¨)",
                "Prix fa√ßonnage (‚Ç¨)", "Prix prestation (‚Ç¨)", "Total pi√®ce (‚Ç¨)", "N¬∞ Barre", "Taux chute (%)", "Unit√©"
            ]
            ws_pieces.append(headers)
            for row in self.liste_pieces:
                ws_pieces.append(row)

            tab1 = Table(displayName="TablePieces", ref=f"A1:{get_column_letter(ws_pieces.max_column)}{ws_pieces.max_row}")
            style1 = TableStyleInfo(name="TableStyleMedium4", showFirstColumn=False, showLastColumn=False, showRowStripes=True, showColumnStripes=False)
            tab1.tableStyleInfo = style1
            ws_pieces.add_table(tab1)

            recap_headers = ["Cat√©gorie", "Code", "Montant (‚Ç¨)", "Quantit√©", "Unit√©", "Prix unitaire (‚Ç¨)"]
            ws_recap.append(recap_headers)
            
            # R√©cap donn√©es avec unit√©s configur√©es
            for mat, val in self.recap_data['recap_materiaux_piece'].items():
                config = self.config_materiaux.get(mat, {})
                unite = config.get('unite', 'm¬≥')
                ws_recap.append(["Mati√®re utile", mat, round(val,2), round(self.recap_data['recap_qte_materiaux_piece'][mat],3), unite, round(self.recap_data['recap_prix_unitaire_materiaux'][mat],2)])
            
            for mat, val in self.recap_data['recap_materiaux_achat'].items():
                config = self.config_materiaux.get(mat, {})
                unite = config.get('unite', 'm¬≥')
                ws_recap.append(["Mati√®re achat", mat, round(val,2), round(self.recap_data['recap_qte_materiaux_achat'][mat],3), unite, round(self.recap_data['recap_prix_unitaire_materiaux'][mat],2)])
            
            for code, val in self.recap_data['recap_traitement'].items():
                ws_recap.append(["Traitement", code, round(val,2), round(self.recap_data['recap_qte_traitement'][code],3), "m¬≥", round(self.prix_traitement[code],2)])
            
            for code, val in self.recap_data['recap_faconnage'].items():
                unite_fac = "ml" if code.endswith("_L") else "m¬≥"
                ws_recap.append(["Fa√ßonnage", code, round(val,2), round(self.recap_data['recap_qte_faconnage'][code],3), unite_fac, round(self.prix_faconnage[code],2)])
            
            for code, val in self.recap_data['recap_prestation'].items():
                unite_prest = "m¬≤" if code.endswith("_S") else "m¬≥"
                ws_recap.append(["Prestation", code, round(val,2), round(self.recap_data['recap_qte_prestation'][code],3), unite_prest, round(self.prix_prestation[code],2)])
            
            if self.recap_data['valorisation_chute'] > 0:
                ws_recap.append([
                    "Valorisation chute", "", self.recap_data['valorisation_chute'],
                    round(self.recap_data['total_volume_chute'] + self.recap_data['total_surface_chute'], 3), 
                    "m¬≥/m¬≤", self.VALORISATION_CHUTE
                ])
            
            tab2 = Table(displayName="TableRecap", ref=f"A1:{get_column_letter(ws_recap.max_column)}{ws_recap.max_row}")
            style2 = TableStyleInfo(name="TableStyleMedium4", showFirstColumn=False, showLastColumn=False, showRowStripes=True, showColumnStripes=False)
            tab2.tableStyleInfo = style2
            ws_recap.add_table(tab2)

            for ws in [ws_pieces, ws_recap]:
                for col in ws.columns:
                    max_length = max(len(str(cell.value)) if cell.value else 0 for cell in col)
                    ws.column_dimensions[get_column_letter(col[0].column)].width = max_length + 2

            # Nom dynamique fichier
            try:
                num_devis = uc.get_project_user_attribute(1).strip().replace(" ", "_")
                client = uc.get_project_number().strip().replace(" ", "_")
                nom_fichier = f"{num_devis}-{client}-prix_configure.xlsx"
            except Exception:
                nom_fichier = "prix_configure.xlsx"

            desktop = os.path.join(os.path.expanduser("~"), "Desktop")
            output_path = os.path.join(desktop, nom_fichier)
            wb.save(output_path)
            
            # Ouvrir le fichier
            subprocess.Popen(['start', '', output_path], shell=True)
            self.log(f"üìÅ Fichier sauv√© : {nom_fichier}")

        except Exception as e:
            raise Exception(f"Erreur Excel : {e}")

def main():
    """Fonction principale"""
    app = ConfigurateurPrixInterface()
    app.root.mainloop()

if __name__ == "__main__":
    main()